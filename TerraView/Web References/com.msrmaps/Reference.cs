//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4959
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4959.
// 
#pragma warning disable 1591

namespace TerraView.com.msrmaps {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TerraServiceSoap", Namespace="http://msrmaps.com/")]
    public partial class TerraService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ConvertLonLatPtToNearestPlaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvertLonLatPtToUtmPtOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvertUtmPtToLonLatPtOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvertPlaceToLonLatPtOperationCompleted;
        
        private System.Threading.SendOrPostCallback CountPlacesInRectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAreaFromPtOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAreaFromRectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAreaFromTileIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLatLonMetricsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPlaceFactsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPlaceListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPlaceListInRectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetThemeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTileMetaFromLonLatPtOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTileMetaFromTileIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTileOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public TerraService() {
            this.Url = global::TerraView.Properties.Settings.Default.TerraView_com_msrmaps_TerraService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ConvertLonLatPtToNearestPlaceCompletedEventHandler ConvertLonLatPtToNearestPlaceCompleted;
        
        /// <remarks/>
        public event ConvertLonLatPtToUtmPtCompletedEventHandler ConvertLonLatPtToUtmPtCompleted;
        
        /// <remarks/>
        public event ConvertUtmPtToLonLatPtCompletedEventHandler ConvertUtmPtToLonLatPtCompleted;
        
        /// <remarks/>
        public event ConvertPlaceToLonLatPtCompletedEventHandler ConvertPlaceToLonLatPtCompleted;
        
        /// <remarks/>
        public event CountPlacesInRectCompletedEventHandler CountPlacesInRectCompleted;
        
        /// <remarks/>
        public event GetAreaFromPtCompletedEventHandler GetAreaFromPtCompleted;
        
        /// <remarks/>
        public event GetAreaFromRectCompletedEventHandler GetAreaFromRectCompleted;
        
        /// <remarks/>
        public event GetAreaFromTileIdCompletedEventHandler GetAreaFromTileIdCompleted;
        
        /// <remarks/>
        public event GetLatLonMetricsCompletedEventHandler GetLatLonMetricsCompleted;
        
        /// <remarks/>
        public event GetPlaceFactsCompletedEventHandler GetPlaceFactsCompleted;
        
        /// <remarks/>
        public event GetPlaceListCompletedEventHandler GetPlaceListCompleted;
        
        /// <remarks/>
        public event GetPlaceListInRectCompletedEventHandler GetPlaceListInRectCompleted;
        
        /// <remarks/>
        public event GetThemeCompletedEventHandler GetThemeCompleted;
        
        /// <remarks/>
        public event GetTileMetaFromLonLatPtCompletedEventHandler GetTileMetaFromLonLatPtCompleted;
        
        /// <remarks/>
        public event GetTileMetaFromTileIdCompletedEventHandler GetTileMetaFromTileIdCompleted;
        
        /// <remarks/>
        public event GetTileCompletedEventHandler GetTileCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msrmaps.com/ConvertLonLatPtToNearestPlace", RequestNamespace="http://msrmaps.com/", ResponseNamespace="http://msrmaps.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ConvertLonLatPtToNearestPlace(LonLatPt point) {
            object[] results = this.Invoke("ConvertLonLatPtToNearestPlace", new object[] {
                        point});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConvertLonLatPtToNearestPlace(LonLatPt point, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConvertLonLatPtToNearestPlace", new object[] {
                        point}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndConvertLonLatPtToNearestPlace(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ConvertLonLatPtToNearestPlaceAsync(LonLatPt point) {
            this.ConvertLonLatPtToNearestPlaceAsync(point, null);
        }
        
        /// <remarks/>
        public void ConvertLonLatPtToNearestPlaceAsync(LonLatPt point, object userState) {
            if ((this.ConvertLonLatPtToNearestPlaceOperationCompleted == null)) {
                this.ConvertLonLatPtToNearestPlaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertLonLatPtToNearestPlaceOperationCompleted);
            }
            this.InvokeAsync("ConvertLonLatPtToNearestPlace", new object[] {
                        point}, this.ConvertLonLatPtToNearestPlaceOperationCompleted, userState);
        }
        
        private void OnConvertLonLatPtToNearestPlaceOperationCompleted(object arg) {
            if ((this.ConvertLonLatPtToNearestPlaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertLonLatPtToNearestPlaceCompleted(this, new ConvertLonLatPtToNearestPlaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msrmaps.com/ConvertLonLatPtToUtmPt", RequestNamespace="http://msrmaps.com/", ResponseNamespace="http://msrmaps.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UtmPt ConvertLonLatPtToUtmPt(LonLatPt point) {
            object[] results = this.Invoke("ConvertLonLatPtToUtmPt", new object[] {
                        point});
            return ((UtmPt)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConvertLonLatPtToUtmPt(LonLatPt point, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConvertLonLatPtToUtmPt", new object[] {
                        point}, callback, asyncState);
        }
        
        /// <remarks/>
        public UtmPt EndConvertLonLatPtToUtmPt(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((UtmPt)(results[0]));
        }
        
        /// <remarks/>
        public void ConvertLonLatPtToUtmPtAsync(LonLatPt point) {
            this.ConvertLonLatPtToUtmPtAsync(point, null);
        }
        
        /// <remarks/>
        public void ConvertLonLatPtToUtmPtAsync(LonLatPt point, object userState) {
            if ((this.ConvertLonLatPtToUtmPtOperationCompleted == null)) {
                this.ConvertLonLatPtToUtmPtOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertLonLatPtToUtmPtOperationCompleted);
            }
            this.InvokeAsync("ConvertLonLatPtToUtmPt", new object[] {
                        point}, this.ConvertLonLatPtToUtmPtOperationCompleted, userState);
        }
        
        private void OnConvertLonLatPtToUtmPtOperationCompleted(object arg) {
            if ((this.ConvertLonLatPtToUtmPtCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertLonLatPtToUtmPtCompleted(this, new ConvertLonLatPtToUtmPtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msrmaps.com/ConvertUtmPtToLonLatPt", RequestNamespace="http://msrmaps.com/", ResponseNamespace="http://msrmaps.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LonLatPt ConvertUtmPtToLonLatPt(UtmPt utm) {
            object[] results = this.Invoke("ConvertUtmPtToLonLatPt", new object[] {
                        utm});
            return ((LonLatPt)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConvertUtmPtToLonLatPt(UtmPt utm, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConvertUtmPtToLonLatPt", new object[] {
                        utm}, callback, asyncState);
        }
        
        /// <remarks/>
        public LonLatPt EndConvertUtmPtToLonLatPt(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LonLatPt)(results[0]));
        }
        
        /// <remarks/>
        public void ConvertUtmPtToLonLatPtAsync(UtmPt utm) {
            this.ConvertUtmPtToLonLatPtAsync(utm, null);
        }
        
        /// <remarks/>
        public void ConvertUtmPtToLonLatPtAsync(UtmPt utm, object userState) {
            if ((this.ConvertUtmPtToLonLatPtOperationCompleted == null)) {
                this.ConvertUtmPtToLonLatPtOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertUtmPtToLonLatPtOperationCompleted);
            }
            this.InvokeAsync("ConvertUtmPtToLonLatPt", new object[] {
                        utm}, this.ConvertUtmPtToLonLatPtOperationCompleted, userState);
        }
        
        private void OnConvertUtmPtToLonLatPtOperationCompleted(object arg) {
            if ((this.ConvertUtmPtToLonLatPtCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertUtmPtToLonLatPtCompleted(this, new ConvertUtmPtToLonLatPtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msrmaps.com/ConvertPlaceToLonLatPt", RequestNamespace="http://msrmaps.com/", ResponseNamespace="http://msrmaps.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LonLatPt ConvertPlaceToLonLatPt(Place place) {
            object[] results = this.Invoke("ConvertPlaceToLonLatPt", new object[] {
                        place});
            return ((LonLatPt)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConvertPlaceToLonLatPt(Place place, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConvertPlaceToLonLatPt", new object[] {
                        place}, callback, asyncState);
        }
        
        /// <remarks/>
        public LonLatPt EndConvertPlaceToLonLatPt(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LonLatPt)(results[0]));
        }
        
        /// <remarks/>
        public void ConvertPlaceToLonLatPtAsync(Place place) {
            this.ConvertPlaceToLonLatPtAsync(place, null);
        }
        
        /// <remarks/>
        public void ConvertPlaceToLonLatPtAsync(Place place, object userState) {
            if ((this.ConvertPlaceToLonLatPtOperationCompleted == null)) {
                this.ConvertPlaceToLonLatPtOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertPlaceToLonLatPtOperationCompleted);
            }
            this.InvokeAsync("ConvertPlaceToLonLatPt", new object[] {
                        place}, this.ConvertPlaceToLonLatPtOperationCompleted, userState);
        }
        
        private void OnConvertPlaceToLonLatPtOperationCompleted(object arg) {
            if ((this.ConvertPlaceToLonLatPtCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertPlaceToLonLatPtCompleted(this, new ConvertPlaceToLonLatPtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msrmaps.com/CountPlacesInRect", RequestNamespace="http://msrmaps.com/", ResponseNamespace="http://msrmaps.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CountPlacesInRect(LonLatPt upperleft, LonLatPt lowerright, PlaceType ptype) {
            object[] results = this.Invoke("CountPlacesInRect", new object[] {
                        upperleft,
                        lowerright,
                        ptype});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCountPlacesInRect(LonLatPt upperleft, LonLatPt lowerright, PlaceType ptype, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CountPlacesInRect", new object[] {
                        upperleft,
                        lowerright,
                        ptype}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndCountPlacesInRect(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CountPlacesInRectAsync(LonLatPt upperleft, LonLatPt lowerright, PlaceType ptype) {
            this.CountPlacesInRectAsync(upperleft, lowerright, ptype, null);
        }
        
        /// <remarks/>
        public void CountPlacesInRectAsync(LonLatPt upperleft, LonLatPt lowerright, PlaceType ptype, object userState) {
            if ((this.CountPlacesInRectOperationCompleted == null)) {
                this.CountPlacesInRectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCountPlacesInRectOperationCompleted);
            }
            this.InvokeAsync("CountPlacesInRect", new object[] {
                        upperleft,
                        lowerright,
                        ptype}, this.CountPlacesInRectOperationCompleted, userState);
        }
        
        private void OnCountPlacesInRectOperationCompleted(object arg) {
            if ((this.CountPlacesInRectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CountPlacesInRectCompleted(this, new CountPlacesInRectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msrmaps.com/GetAreaFromPt", RequestNamespace="http://msrmaps.com/", ResponseNamespace="http://msrmaps.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AreaBoundingBox GetAreaFromPt(LonLatPt center, int theme, Scale scale, int displayPixWidth, int displayPixHeight) {
            object[] results = this.Invoke("GetAreaFromPt", new object[] {
                        center,
                        theme,
                        scale,
                        displayPixWidth,
                        displayPixHeight});
            return ((AreaBoundingBox)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAreaFromPt(LonLatPt center, int theme, Scale scale, int displayPixWidth, int displayPixHeight, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAreaFromPt", new object[] {
                        center,
                        theme,
                        scale,
                        displayPixWidth,
                        displayPixHeight}, callback, asyncState);
        }
        
        /// <remarks/>
        public AreaBoundingBox EndGetAreaFromPt(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((AreaBoundingBox)(results[0]));
        }
        
        /// <remarks/>
        public void GetAreaFromPtAsync(LonLatPt center, int theme, Scale scale, int displayPixWidth, int displayPixHeight) {
            this.GetAreaFromPtAsync(center, theme, scale, displayPixWidth, displayPixHeight, null);
        }
        
        /// <remarks/>
        public void GetAreaFromPtAsync(LonLatPt center, int theme, Scale scale, int displayPixWidth, int displayPixHeight, object userState) {
            if ((this.GetAreaFromPtOperationCompleted == null)) {
                this.GetAreaFromPtOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAreaFromPtOperationCompleted);
            }
            this.InvokeAsync("GetAreaFromPt", new object[] {
                        center,
                        theme,
                        scale,
                        displayPixWidth,
                        displayPixHeight}, this.GetAreaFromPtOperationCompleted, userState);
        }
        
        private void OnGetAreaFromPtOperationCompleted(object arg) {
            if ((this.GetAreaFromPtCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAreaFromPtCompleted(this, new GetAreaFromPtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msrmaps.com/GetAreaFromRect", RequestNamespace="http://msrmaps.com/", ResponseNamespace="http://msrmaps.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AreaBoundingBox GetAreaFromRect(LonLatPt upperLeft, LonLatPt lowerRight, int theme, Scale scale) {
            object[] results = this.Invoke("GetAreaFromRect", new object[] {
                        upperLeft,
                        lowerRight,
                        theme,
                        scale});
            return ((AreaBoundingBox)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAreaFromRect(LonLatPt upperLeft, LonLatPt lowerRight, int theme, Scale scale, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAreaFromRect", new object[] {
                        upperLeft,
                        lowerRight,
                        theme,
                        scale}, callback, asyncState);
        }
        
        /// <remarks/>
        public AreaBoundingBox EndGetAreaFromRect(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((AreaBoundingBox)(results[0]));
        }
        
        /// <remarks/>
        public void GetAreaFromRectAsync(LonLatPt upperLeft, LonLatPt lowerRight, int theme, Scale scale) {
            this.GetAreaFromRectAsync(upperLeft, lowerRight, theme, scale, null);
        }
        
        /// <remarks/>
        public void GetAreaFromRectAsync(LonLatPt upperLeft, LonLatPt lowerRight, int theme, Scale scale, object userState) {
            if ((this.GetAreaFromRectOperationCompleted == null)) {
                this.GetAreaFromRectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAreaFromRectOperationCompleted);
            }
            this.InvokeAsync("GetAreaFromRect", new object[] {
                        upperLeft,
                        lowerRight,
                        theme,
                        scale}, this.GetAreaFromRectOperationCompleted, userState);
        }
        
        private void OnGetAreaFromRectOperationCompleted(object arg) {
            if ((this.GetAreaFromRectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAreaFromRectCompleted(this, new GetAreaFromRectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msrmaps.com/GetAreaFromTileId", RequestNamespace="http://msrmaps.com/", ResponseNamespace="http://msrmaps.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AreaBoundingBox GetAreaFromTileId(TileId id, int displayPixWidth, int displayPixHeight) {
            object[] results = this.Invoke("GetAreaFromTileId", new object[] {
                        id,
                        displayPixWidth,
                        displayPixHeight});
            return ((AreaBoundingBox)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAreaFromTileId(TileId id, int displayPixWidth, int displayPixHeight, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAreaFromTileId", new object[] {
                        id,
                        displayPixWidth,
                        displayPixHeight}, callback, asyncState);
        }
        
        /// <remarks/>
        public AreaBoundingBox EndGetAreaFromTileId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((AreaBoundingBox)(results[0]));
        }
        
        /// <remarks/>
        public void GetAreaFromTileIdAsync(TileId id, int displayPixWidth, int displayPixHeight) {
            this.GetAreaFromTileIdAsync(id, displayPixWidth, displayPixHeight, null);
        }
        
        /// <remarks/>
        public void GetAreaFromTileIdAsync(TileId id, int displayPixWidth, int displayPixHeight, object userState) {
            if ((this.GetAreaFromTileIdOperationCompleted == null)) {
                this.GetAreaFromTileIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAreaFromTileIdOperationCompleted);
            }
            this.InvokeAsync("GetAreaFromTileId", new object[] {
                        id,
                        displayPixWidth,
                        displayPixHeight}, this.GetAreaFromTileIdOperationCompleted, userState);
        }
        
        private void OnGetAreaFromTileIdOperationCompleted(object arg) {
            if ((this.GetAreaFromTileIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAreaFromTileIdCompleted(this, new GetAreaFromTileIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msrmaps.com/GetLatLonMetrics", RequestNamespace="http://msrmaps.com/", ResponseNamespace="http://msrmaps.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ThemeBoundingBox[] GetLatLonMetrics(LonLatPt point) {
            object[] results = this.Invoke("GetLatLonMetrics", new object[] {
                        point});
            return ((ThemeBoundingBox[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLatLonMetrics(LonLatPt point, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLatLonMetrics", new object[] {
                        point}, callback, asyncState);
        }
        
        /// <remarks/>
        public ThemeBoundingBox[] EndGetLatLonMetrics(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ThemeBoundingBox[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLatLonMetricsAsync(LonLatPt point) {
            this.GetLatLonMetricsAsync(point, null);
        }
        
        /// <remarks/>
        public void GetLatLonMetricsAsync(LonLatPt point, object userState) {
            if ((this.GetLatLonMetricsOperationCompleted == null)) {
                this.GetLatLonMetricsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatLonMetricsOperationCompleted);
            }
            this.InvokeAsync("GetLatLonMetrics", new object[] {
                        point}, this.GetLatLonMetricsOperationCompleted, userState);
        }
        
        private void OnGetLatLonMetricsOperationCompleted(object arg) {
            if ((this.GetLatLonMetricsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatLonMetricsCompleted(this, new GetLatLonMetricsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msrmaps.com/GetPlaceFacts", RequestNamespace="http://msrmaps.com/", ResponseNamespace="http://msrmaps.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PlaceFacts GetPlaceFacts(Place place) {
            object[] results = this.Invoke("GetPlaceFacts", new object[] {
                        place});
            return ((PlaceFacts)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPlaceFacts(Place place, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPlaceFacts", new object[] {
                        place}, callback, asyncState);
        }
        
        /// <remarks/>
        public PlaceFacts EndGetPlaceFacts(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PlaceFacts)(results[0]));
        }
        
        /// <remarks/>
        public void GetPlaceFactsAsync(Place place) {
            this.GetPlaceFactsAsync(place, null);
        }
        
        /// <remarks/>
        public void GetPlaceFactsAsync(Place place, object userState) {
            if ((this.GetPlaceFactsOperationCompleted == null)) {
                this.GetPlaceFactsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPlaceFactsOperationCompleted);
            }
            this.InvokeAsync("GetPlaceFacts", new object[] {
                        place}, this.GetPlaceFactsOperationCompleted, userState);
        }
        
        private void OnGetPlaceFactsOperationCompleted(object arg) {
            if ((this.GetPlaceFactsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPlaceFactsCompleted(this, new GetPlaceFactsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msrmaps.com/GetPlaceList", RequestNamespace="http://msrmaps.com/", ResponseNamespace="http://msrmaps.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public PlaceFacts[] GetPlaceList(string placeName, int MaxItems, bool imagePresence) {
            object[] results = this.Invoke("GetPlaceList", new object[] {
                        placeName,
                        MaxItems,
                        imagePresence});
            return ((PlaceFacts[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPlaceList(string placeName, int MaxItems, bool imagePresence, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPlaceList", new object[] {
                        placeName,
                        MaxItems,
                        imagePresence}, callback, asyncState);
        }
        
        /// <remarks/>
        public PlaceFacts[] EndGetPlaceList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PlaceFacts[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPlaceListAsync(string placeName, int MaxItems, bool imagePresence) {
            this.GetPlaceListAsync(placeName, MaxItems, imagePresence, null);
        }
        
        /// <remarks/>
        public void GetPlaceListAsync(string placeName, int MaxItems, bool imagePresence, object userState) {
            if ((this.GetPlaceListOperationCompleted == null)) {
                this.GetPlaceListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPlaceListOperationCompleted);
            }
            this.InvokeAsync("GetPlaceList", new object[] {
                        placeName,
                        MaxItems,
                        imagePresence}, this.GetPlaceListOperationCompleted, userState);
        }
        
        private void OnGetPlaceListOperationCompleted(object arg) {
            if ((this.GetPlaceListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPlaceListCompleted(this, new GetPlaceListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msrmaps.com/GetPlaceListInRect", RequestNamespace="http://msrmaps.com/", ResponseNamespace="http://msrmaps.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public PlaceFacts[] GetPlaceListInRect(LonLatPt upperleft, LonLatPt lowerright, PlaceType ptype, int MaxItems) {
            object[] results = this.Invoke("GetPlaceListInRect", new object[] {
                        upperleft,
                        lowerright,
                        ptype,
                        MaxItems});
            return ((PlaceFacts[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPlaceListInRect(LonLatPt upperleft, LonLatPt lowerright, PlaceType ptype, int MaxItems, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPlaceListInRect", new object[] {
                        upperleft,
                        lowerright,
                        ptype,
                        MaxItems}, callback, asyncState);
        }
        
        /// <remarks/>
        public PlaceFacts[] EndGetPlaceListInRect(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PlaceFacts[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPlaceListInRectAsync(LonLatPt upperleft, LonLatPt lowerright, PlaceType ptype, int MaxItems) {
            this.GetPlaceListInRectAsync(upperleft, lowerright, ptype, MaxItems, null);
        }
        
        /// <remarks/>
        public void GetPlaceListInRectAsync(LonLatPt upperleft, LonLatPt lowerright, PlaceType ptype, int MaxItems, object userState) {
            if ((this.GetPlaceListInRectOperationCompleted == null)) {
                this.GetPlaceListInRectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPlaceListInRectOperationCompleted);
            }
            this.InvokeAsync("GetPlaceListInRect", new object[] {
                        upperleft,
                        lowerright,
                        ptype,
                        MaxItems}, this.GetPlaceListInRectOperationCompleted, userState);
        }
        
        private void OnGetPlaceListInRectOperationCompleted(object arg) {
            if ((this.GetPlaceListInRectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPlaceListInRectCompleted(this, new GetPlaceListInRectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msrmaps.com/GetTheme", RequestNamespace="http://msrmaps.com/", ResponseNamespace="http://msrmaps.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ThemeInfo GetTheme(int theme) {
            object[] results = this.Invoke("GetTheme", new object[] {
                        theme});
            return ((ThemeInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTheme(int theme, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTheme", new object[] {
                        theme}, callback, asyncState);
        }
        
        /// <remarks/>
        public ThemeInfo EndGetTheme(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ThemeInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetThemeAsync(int theme) {
            this.GetThemeAsync(theme, null);
        }
        
        /// <remarks/>
        public void GetThemeAsync(int theme, object userState) {
            if ((this.GetThemeOperationCompleted == null)) {
                this.GetThemeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetThemeOperationCompleted);
            }
            this.InvokeAsync("GetTheme", new object[] {
                        theme}, this.GetThemeOperationCompleted, userState);
        }
        
        private void OnGetThemeOperationCompleted(object arg) {
            if ((this.GetThemeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetThemeCompleted(this, new GetThemeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msrmaps.com/GetTileMetaFromLonLatPt", RequestNamespace="http://msrmaps.com/", ResponseNamespace="http://msrmaps.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TileMeta GetTileMetaFromLonLatPt(LonLatPt point, int theme, Scale scale) {
            object[] results = this.Invoke("GetTileMetaFromLonLatPt", new object[] {
                        point,
                        theme,
                        scale});
            return ((TileMeta)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTileMetaFromLonLatPt(LonLatPt point, int theme, Scale scale, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTileMetaFromLonLatPt", new object[] {
                        point,
                        theme,
                        scale}, callback, asyncState);
        }
        
        /// <remarks/>
        public TileMeta EndGetTileMetaFromLonLatPt(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TileMeta)(results[0]));
        }
        
        /// <remarks/>
        public void GetTileMetaFromLonLatPtAsync(LonLatPt point, int theme, Scale scale) {
            this.GetTileMetaFromLonLatPtAsync(point, theme, scale, null);
        }
        
        /// <remarks/>
        public void GetTileMetaFromLonLatPtAsync(LonLatPt point, int theme, Scale scale, object userState) {
            if ((this.GetTileMetaFromLonLatPtOperationCompleted == null)) {
                this.GetTileMetaFromLonLatPtOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTileMetaFromLonLatPtOperationCompleted);
            }
            this.InvokeAsync("GetTileMetaFromLonLatPt", new object[] {
                        point,
                        theme,
                        scale}, this.GetTileMetaFromLonLatPtOperationCompleted, userState);
        }
        
        private void OnGetTileMetaFromLonLatPtOperationCompleted(object arg) {
            if ((this.GetTileMetaFromLonLatPtCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTileMetaFromLonLatPtCompleted(this, new GetTileMetaFromLonLatPtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msrmaps.com/GetTileMetaFromTileId", RequestNamespace="http://msrmaps.com/", ResponseNamespace="http://msrmaps.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TileMeta GetTileMetaFromTileId(TileId id) {
            object[] results = this.Invoke("GetTileMetaFromTileId", new object[] {
                        id});
            return ((TileMeta)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTileMetaFromTileId(TileId id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTileMetaFromTileId", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public TileMeta EndGetTileMetaFromTileId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TileMeta)(results[0]));
        }
        
        /// <remarks/>
        public void GetTileMetaFromTileIdAsync(TileId id) {
            this.GetTileMetaFromTileIdAsync(id, null);
        }
        
        /// <remarks/>
        public void GetTileMetaFromTileIdAsync(TileId id, object userState) {
            if ((this.GetTileMetaFromTileIdOperationCompleted == null)) {
                this.GetTileMetaFromTileIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTileMetaFromTileIdOperationCompleted);
            }
            this.InvokeAsync("GetTileMetaFromTileId", new object[] {
                        id}, this.GetTileMetaFromTileIdOperationCompleted, userState);
        }
        
        private void OnGetTileMetaFromTileIdOperationCompleted(object arg) {
            if ((this.GetTileMetaFromTileIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTileMetaFromTileIdCompleted(this, new GetTileMetaFromTileIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msrmaps.com/GetTile", RequestNamespace="http://msrmaps.com/", ResponseNamespace="http://msrmaps.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetTile(TileId id) {
            object[] results = this.Invoke("GetTile", new object[] {
                        id});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTile(TileId id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTile", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetTile(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTileAsync(TileId id) {
            this.GetTileAsync(id, null);
        }
        
        /// <remarks/>
        public void GetTileAsync(TileId id, object userState) {
            if ((this.GetTileOperationCompleted == null)) {
                this.GetTileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTileOperationCompleted);
            }
            this.InvokeAsync("GetTile", new object[] {
                        id}, this.GetTileOperationCompleted, userState);
        }
        
        private void OnGetTileOperationCompleted(object arg) {
            if ((this.GetTileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTileCompleted(this, new GetTileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://msrmaps.com/")]
    public partial class LonLatPt {
        
        private double lonField;
        
        private double latField;
        
        /// <remarks/>
        public double Lon {
            get {
                return this.lonField;
            }
            set {
                this.lonField = value;
            }
        }
        
        /// <remarks/>
        public double Lat {
            get {
                return this.latField;
            }
            set {
                this.latField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://msrmaps.com/")]
    public partial class ThemeInfo {
        
        private int themeField;
        
        private string nameField;
        
        private string descriptionField;
        
        private string supplierField;
        
        private Scale loScaleField;
        
        private Scale hiScaleField;
        
        private ProjectionType projectionIdField;
        
        private string projectionNameField;
        
        private string copyrightNoticeField;
        
        /// <remarks/>
        public int Theme {
            get {
                return this.themeField;
            }
            set {
                this.themeField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string Supplier {
            get {
                return this.supplierField;
            }
            set {
                this.supplierField = value;
            }
        }
        
        /// <remarks/>
        public Scale LoScale {
            get {
                return this.loScaleField;
            }
            set {
                this.loScaleField = value;
            }
        }
        
        /// <remarks/>
        public Scale HiScale {
            get {
                return this.hiScaleField;
            }
            set {
                this.hiScaleField = value;
            }
        }
        
        /// <remarks/>
        public ProjectionType ProjectionId {
            get {
                return this.projectionIdField;
            }
            set {
                this.projectionIdField = value;
            }
        }
        
        /// <remarks/>
        public string ProjectionName {
            get {
                return this.projectionNameField;
            }
            set {
                this.projectionNameField = value;
            }
        }
        
        /// <remarks/>
        public string CopyrightNotice {
            get {
                return this.copyrightNoticeField;
            }
            set {
                this.copyrightNoticeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://msrmaps.com/")]
    public enum Scale {
        
        /// <remarks/>
        Scale1mm,
        
        /// <remarks/>
        Scale2mm,
        
        /// <remarks/>
        Scale4mm,
        
        /// <remarks/>
        Scale8mm,
        
        /// <remarks/>
        Scale16mm,
        
        /// <remarks/>
        Scale32mm,
        
        /// <remarks/>
        Scale63mm,
        
        /// <remarks/>
        Scale125mm,
        
        /// <remarks/>
        Scale250mm,
        
        /// <remarks/>
        Scale500mm,
        
        /// <remarks/>
        Scale1m,
        
        /// <remarks/>
        Scale2m,
        
        /// <remarks/>
        Scale4m,
        
        /// <remarks/>
        Scale8m,
        
        /// <remarks/>
        Scale16m,
        
        /// <remarks/>
        Scale32m,
        
        /// <remarks/>
        Scale64m,
        
        /// <remarks/>
        Scale128m,
        
        /// <remarks/>
        Scale256m,
        
        /// <remarks/>
        Scale512m,
        
        /// <remarks/>
        Scale1km,
        
        /// <remarks/>
        Scale2km,
        
        /// <remarks/>
        Scale4km,
        
        /// <remarks/>
        Scale8km,
        
        /// <remarks/>
        Scale16km,
        
        /// <remarks/>
        Scale32km,
        
        /// <remarks/>
        Scale64km,
        
        /// <remarks/>
        Scale128km,
        
        /// <remarks/>
        Scale256km,
        
        /// <remarks/>
        Scale512km,
        
        /// <remarks/>
        Scale1024km,
        
        /// <remarks/>
        Scale2048km,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://msrmaps.com/")]
    public enum ProjectionType {
        
        /// <remarks/>
        Geographic,
        
        /// <remarks/>
        UtmNad27,
        
        /// <remarks/>
        UtmNad83,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://msrmaps.com/")]
    public partial class PlaceFacts {
        
        private Place placeField;
        
        private LonLatPt centerField;
        
        private int availableThemeMaskField;
        
        private PlaceType placeTypeIdField;
        
        private int populationField;
        
        /// <remarks/>
        public Place Place {
            get {
                return this.placeField;
            }
            set {
                this.placeField = value;
            }
        }
        
        /// <remarks/>
        public LonLatPt Center {
            get {
                return this.centerField;
            }
            set {
                this.centerField = value;
            }
        }
        
        /// <remarks/>
        public int AvailableThemeMask {
            get {
                return this.availableThemeMaskField;
            }
            set {
                this.availableThemeMaskField = value;
            }
        }
        
        /// <remarks/>
        public PlaceType PlaceTypeId {
            get {
                return this.placeTypeIdField;
            }
            set {
                this.placeTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public int Population {
            get {
                return this.populationField;
            }
            set {
                this.populationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://msrmaps.com/")]
    public partial class Place {
        
        private string cityField;
        
        private string stateField;
        
        private string countryField;
        
        /// <remarks/>
        public string City {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        public string State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public string Country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://msrmaps.com/")]
    public enum PlaceType {
        
        /// <remarks/>
        UnknownPlaceType,
        
        /// <remarks/>
        AirRailStation,
        
        /// <remarks/>
        BayGulf,
        
        /// <remarks/>
        CapePeninsula,
        
        /// <remarks/>
        CityTown,
        
        /// <remarks/>
        HillMountain,
        
        /// <remarks/>
        Island,
        
        /// <remarks/>
        Lake,
        
        /// <remarks/>
        OtherLandFeature,
        
        /// <remarks/>
        OtherWaterFeature,
        
        /// <remarks/>
        ParkBeach,
        
        /// <remarks/>
        PointOfInterest,
        
        /// <remarks/>
        River,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://msrmaps.com/")]
    public partial class ThemeBoundingBox {
        
        private int themeField;
        
        private string themeNameField;
        
        private int sparsenessField;
        
        private Scale loScaleField;
        
        private Scale hiScaleField;
        
        private ProjectionType projectionIdField;
        
        private string projectionNameField;
        
        private double westLongitudeField;
        
        private double northLatitudeField;
        
        private double eastLongitudeField;
        
        private double southLatitudeField;
        
        /// <remarks/>
        public int Theme {
            get {
                return this.themeField;
            }
            set {
                this.themeField = value;
            }
        }
        
        /// <remarks/>
        public string ThemeName {
            get {
                return this.themeNameField;
            }
            set {
                this.themeNameField = value;
            }
        }
        
        /// <remarks/>
        public int Sparseness {
            get {
                return this.sparsenessField;
            }
            set {
                this.sparsenessField = value;
            }
        }
        
        /// <remarks/>
        public Scale LoScale {
            get {
                return this.loScaleField;
            }
            set {
                this.loScaleField = value;
            }
        }
        
        /// <remarks/>
        public Scale HiScale {
            get {
                return this.hiScaleField;
            }
            set {
                this.hiScaleField = value;
            }
        }
        
        /// <remarks/>
        public ProjectionType ProjectionId {
            get {
                return this.projectionIdField;
            }
            set {
                this.projectionIdField = value;
            }
        }
        
        /// <remarks/>
        public string ProjectionName {
            get {
                return this.projectionNameField;
            }
            set {
                this.projectionNameField = value;
            }
        }
        
        /// <remarks/>
        public double WestLongitude {
            get {
                return this.westLongitudeField;
            }
            set {
                this.westLongitudeField = value;
            }
        }
        
        /// <remarks/>
        public double NorthLatitude {
            get {
                return this.northLatitudeField;
            }
            set {
                this.northLatitudeField = value;
            }
        }
        
        /// <remarks/>
        public double EastLongitude {
            get {
                return this.eastLongitudeField;
            }
            set {
                this.eastLongitudeField = value;
            }
        }
        
        /// <remarks/>
        public double SouthLatitude {
            get {
                return this.southLatitudeField;
            }
            set {
                this.southLatitudeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://msrmaps.com/")]
    public partial class OverlappingThemeInfo {
        
        private bool localThemeField;
        
        private int themeField;
        
        private LonLatPt pointField;
        
        private string themeNameField;
        
        private System.DateTime captureField;
        
        private ProjectionType projectionIdField;
        
        private Scale loScaleField;
        
        private Scale hiScaleField;
        
        private string urlField;
        
        /// <remarks/>
        public bool LocalTheme {
            get {
                return this.localThemeField;
            }
            set {
                this.localThemeField = value;
            }
        }
        
        /// <remarks/>
        public int Theme {
            get {
                return this.themeField;
            }
            set {
                this.themeField = value;
            }
        }
        
        /// <remarks/>
        public LonLatPt Point {
            get {
                return this.pointField;
            }
            set {
                this.pointField = value;
            }
        }
        
        /// <remarks/>
        public string ThemeName {
            get {
                return this.themeNameField;
            }
            set {
                this.themeNameField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Capture {
            get {
                return this.captureField;
            }
            set {
                this.captureField = value;
            }
        }
        
        /// <remarks/>
        public ProjectionType ProjectionId {
            get {
                return this.projectionIdField;
            }
            set {
                this.projectionIdField = value;
            }
        }
        
        /// <remarks/>
        public Scale LoScale {
            get {
                return this.loScaleField;
            }
            set {
                this.loScaleField = value;
            }
        }
        
        /// <remarks/>
        public Scale HiScale {
            get {
                return this.hiScaleField;
            }
            set {
                this.hiScaleField = value;
            }
        }
        
        /// <remarks/>
        public string Url {
            get {
                return this.urlField;
            }
            set {
                this.urlField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://msrmaps.com/")]
    public partial class LonLatPtOffset {
        
        private LonLatPt pointField;
        
        private int xOffsetField;
        
        private int yOffsetField;
        
        /// <remarks/>
        public LonLatPt Point {
            get {
                return this.pointField;
            }
            set {
                this.pointField = value;
            }
        }
        
        /// <remarks/>
        public int XOffset {
            get {
                return this.xOffsetField;
            }
            set {
                this.xOffsetField = value;
            }
        }
        
        /// <remarks/>
        public int YOffset {
            get {
                return this.yOffsetField;
            }
            set {
                this.yOffsetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://msrmaps.com/")]
    public partial class TileId {
        
        private int themeField;
        
        private Scale scaleField;
        
        private int sceneField;
        
        private int xField;
        
        private int yField;
        
        /// <remarks/>
        public int Theme {
            get {
                return this.themeField;
            }
            set {
                this.themeField = value;
            }
        }
        
        /// <remarks/>
        public Scale Scale {
            get {
                return this.scaleField;
            }
            set {
                this.scaleField = value;
            }
        }
        
        /// <remarks/>
        public int Scene {
            get {
                return this.sceneField;
            }
            set {
                this.sceneField = value;
            }
        }
        
        /// <remarks/>
        public int X {
            get {
                return this.xField;
            }
            set {
                this.xField = value;
            }
        }
        
        /// <remarks/>
        public int Y {
            get {
                return this.yField;
            }
            set {
                this.yField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://msrmaps.com/")]
    public partial class TileMeta {
        
        private TileId idField;
        
        private bool tileExistsField;
        
        private LonLatPt northWestField;
        
        private LonLatPt northEastField;
        
        private LonLatPt southWestField;
        
        private LonLatPt southEastField;
        
        private LonLatPt centerField;
        
        private System.DateTime captureField;
        
        /// <remarks/>
        public TileId Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public bool TileExists {
            get {
                return this.tileExistsField;
            }
            set {
                this.tileExistsField = value;
            }
        }
        
        /// <remarks/>
        public LonLatPt NorthWest {
            get {
                return this.northWestField;
            }
            set {
                this.northWestField = value;
            }
        }
        
        /// <remarks/>
        public LonLatPt NorthEast {
            get {
                return this.northEastField;
            }
            set {
                this.northEastField = value;
            }
        }
        
        /// <remarks/>
        public LonLatPt SouthWest {
            get {
                return this.southWestField;
            }
            set {
                this.southWestField = value;
            }
        }
        
        /// <remarks/>
        public LonLatPt SouthEast {
            get {
                return this.southEastField;
            }
            set {
                this.southEastField = value;
            }
        }
        
        /// <remarks/>
        public LonLatPt Center {
            get {
                return this.centerField;
            }
            set {
                this.centerField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Capture {
            get {
                return this.captureField;
            }
            set {
                this.captureField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://msrmaps.com/")]
    public partial class AreaCoordinate {
        
        private TileMeta tileMetaField;
        
        private LonLatPtOffset offsetField;
        
        /// <remarks/>
        public TileMeta TileMeta {
            get {
                return this.tileMetaField;
            }
            set {
                this.tileMetaField = value;
            }
        }
        
        /// <remarks/>
        public LonLatPtOffset Offset {
            get {
                return this.offsetField;
            }
            set {
                this.offsetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://msrmaps.com/")]
    public partial class AreaBoundingBox {
        
        private AreaCoordinate northWestField;
        
        private AreaCoordinate northEastField;
        
        private AreaCoordinate southWestField;
        
        private AreaCoordinate southEastField;
        
        private AreaCoordinate centerField;
        
        private string nearestPlaceField;
        
        private OverlappingThemeInfo[] overlappingThemeInfosField;
        
        /// <remarks/>
        public AreaCoordinate NorthWest {
            get {
                return this.northWestField;
            }
            set {
                this.northWestField = value;
            }
        }
        
        /// <remarks/>
        public AreaCoordinate NorthEast {
            get {
                return this.northEastField;
            }
            set {
                this.northEastField = value;
            }
        }
        
        /// <remarks/>
        public AreaCoordinate SouthWest {
            get {
                return this.southWestField;
            }
            set {
                this.southWestField = value;
            }
        }
        
        /// <remarks/>
        public AreaCoordinate SouthEast {
            get {
                return this.southEastField;
            }
            set {
                this.southEastField = value;
            }
        }
        
        /// <remarks/>
        public AreaCoordinate Center {
            get {
                return this.centerField;
            }
            set {
                this.centerField = value;
            }
        }
        
        /// <remarks/>
        public string NearestPlace {
            get {
                return this.nearestPlaceField;
            }
            set {
                this.nearestPlaceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public OverlappingThemeInfo[] OverlappingThemeInfos {
            get {
                return this.overlappingThemeInfosField;
            }
            set {
                this.overlappingThemeInfosField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://msrmaps.com/")]
    public partial class UtmPt {
        
        private int zoneField;
        
        private double xField;
        
        private double yField;
        
        /// <remarks/>
        public int Zone {
            get {
                return this.zoneField;
            }
            set {
                this.zoneField = value;
            }
        }
        
        /// <remarks/>
        public double X {
            get {
                return this.xField;
            }
            set {
                this.xField = value;
            }
        }
        
        /// <remarks/>
        public double Y {
            get {
                return this.yField;
            }
            set {
                this.yField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ConvertLonLatPtToNearestPlaceCompletedEventHandler(object sender, ConvertLonLatPtToNearestPlaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvertLonLatPtToNearestPlaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConvertLonLatPtToNearestPlaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ConvertLonLatPtToUtmPtCompletedEventHandler(object sender, ConvertLonLatPtToUtmPtCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvertLonLatPtToUtmPtCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConvertLonLatPtToUtmPtCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UtmPt Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UtmPt)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ConvertUtmPtToLonLatPtCompletedEventHandler(object sender, ConvertUtmPtToLonLatPtCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvertUtmPtToLonLatPtCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConvertUtmPtToLonLatPtCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LonLatPt Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LonLatPt)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ConvertPlaceToLonLatPtCompletedEventHandler(object sender, ConvertPlaceToLonLatPtCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvertPlaceToLonLatPtCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConvertPlaceToLonLatPtCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LonLatPt Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LonLatPt)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void CountPlacesInRectCompletedEventHandler(object sender, CountPlacesInRectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CountPlacesInRectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CountPlacesInRectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAreaFromPtCompletedEventHandler(object sender, GetAreaFromPtCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAreaFromPtCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAreaFromPtCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AreaBoundingBox Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AreaBoundingBox)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAreaFromRectCompletedEventHandler(object sender, GetAreaFromRectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAreaFromRectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAreaFromRectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AreaBoundingBox Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AreaBoundingBox)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAreaFromTileIdCompletedEventHandler(object sender, GetAreaFromTileIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAreaFromTileIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAreaFromTileIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AreaBoundingBox Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AreaBoundingBox)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetLatLonMetricsCompletedEventHandler(object sender, GetLatLonMetricsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLatLonMetricsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLatLonMetricsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ThemeBoundingBox[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ThemeBoundingBox[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetPlaceFactsCompletedEventHandler(object sender, GetPlaceFactsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPlaceFactsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPlaceFactsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PlaceFacts Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PlaceFacts)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetPlaceListCompletedEventHandler(object sender, GetPlaceListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPlaceListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPlaceListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PlaceFacts[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PlaceFacts[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetPlaceListInRectCompletedEventHandler(object sender, GetPlaceListInRectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPlaceListInRectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPlaceListInRectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PlaceFacts[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PlaceFacts[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetThemeCompletedEventHandler(object sender, GetThemeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetThemeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetThemeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ThemeInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ThemeInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetTileMetaFromLonLatPtCompletedEventHandler(object sender, GetTileMetaFromLonLatPtCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTileMetaFromLonLatPtCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTileMetaFromLonLatPtCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TileMeta Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TileMeta)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetTileMetaFromTileIdCompletedEventHandler(object sender, GetTileMetaFromTileIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTileMetaFromTileIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTileMetaFromTileIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TileMeta Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TileMeta)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetTileCompletedEventHandler(object sender, GetTileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591